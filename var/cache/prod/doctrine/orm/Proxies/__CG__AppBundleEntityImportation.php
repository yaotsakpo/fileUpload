<?php

namespace Proxies\__CG__\AppBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Importation extends \AppBundle\Entity\Importation implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\Importation' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\Importation' . "\0" . 'dateCreation', '' . "\0" . 'AppBundle\\Entity\\Importation' . "\0" . 'mois', '' . "\0" . 'AppBundle\\Entity\\Importation' . "\0" . 'annee', '' . "\0" . 'AppBundle\\Entity\\Importation' . "\0" . 'source', '' . "\0" . 'AppBundle\\Entity\\Importation' . "\0" . 'status', '' . "\0" . 'AppBundle\\Entity\\Importation' . "\0" . 'operations', '' . "\0" . 'AppBundle\\Entity\\Importation' . "\0" . 'typeOperation', '' . "\0" . 'AppBundle\\Entity\\Importation' . "\0" . 'journals'];
        }

        return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\Importation' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\Importation' . "\0" . 'dateCreation', '' . "\0" . 'AppBundle\\Entity\\Importation' . "\0" . 'mois', '' . "\0" . 'AppBundle\\Entity\\Importation' . "\0" . 'annee', '' . "\0" . 'AppBundle\\Entity\\Importation' . "\0" . 'source', '' . "\0" . 'AppBundle\\Entity\\Importation' . "\0" . 'status', '' . "\0" . 'AppBundle\\Entity\\Importation' . "\0" . 'operations', '' . "\0" . 'AppBundle\\Entity\\Importation' . "\0" . 'typeOperation', '' . "\0" . 'AppBundle\\Entity\\Importation' . "\0" . 'journals'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Importation $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateCreation($dateCreation)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateCreation', [$dateCreation]);

        return parent::setDateCreation($dateCreation);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateCreation()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateCreation', []);

        return parent::getDateCreation();
    }

    /**
     * {@inheritDoc}
     */
    public function setMois($mois)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMois', [$mois]);

        return parent::setMois($mois);
    }

    /**
     * {@inheritDoc}
     */
    public function getMois()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMois', []);

        return parent::getMois();
    }

    /**
     * {@inheritDoc}
     */
    public function setAnnee($annee)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAnnee', [$annee]);

        return parent::setAnnee($annee);
    }

    /**
     * {@inheritDoc}
     */
    public function getAnnee()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAnnee', []);

        return parent::getAnnee();
    }

    /**
     * {@inheritDoc}
     */
    public function setSource($source)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSource', [$source]);

        return parent::setSource($source);
    }

    /**
     * {@inheritDoc}
     */
    public function getSource()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSource', []);

        return parent::getSource();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', [$status]);

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', []);

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function addOperation(\AppBundle\Entity\OperationCaisse $operation)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addOperation', [$operation]);

        return parent::addOperation($operation);
    }

    /**
     * {@inheritDoc}
     */
    public function removeOperation(\AppBundle\Entity\OperationCaisse $operation)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeOperation', [$operation]);

        return parent::removeOperation($operation);
    }

    /**
     * {@inheritDoc}
     */
    public function getOperations()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOperations', []);

        return parent::getOperations();
    }

    /**
     * {@inheritDoc}
     */
    public function setTypeOperation(\AppBundle\Entity\TypeOperation $typeOperation = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTypeOperation', [$typeOperation]);

        return parent::setTypeOperation($typeOperation);
    }

    /**
     * {@inheritDoc}
     */
    public function getTypeOperation()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTypeOperation', []);

        return parent::getTypeOperation();
    }

    /**
     * {@inheritDoc}
     */
    public function addJournal(\AppBundle\Entity\Journal $journal)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addJournal', [$journal]);

        return parent::addJournal($journal);
    }

    /**
     * {@inheritDoc}
     */
    public function removeJournal(\AppBundle\Entity\Journal $journal)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeJournal', [$journal]);

        return parent::removeJournal($journal);
    }

    /**
     * {@inheritDoc}
     */
    public function getJournals()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getJournals', []);

        return parent::getJournals();
    }

}
